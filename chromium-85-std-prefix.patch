From 5524ee0b3000d7ecd19d18e408e656eeb249e5fd Mon Sep 17 00:00:00 2001
From: Mike Lothian <mike@fireburn.co.uk>
Date: Fri, 12 Jun 2020 14:16:13 +0100
Subject: [PATCH] Add std:: prefix


diff --git a/base/memory/checked_ptr.h b/base/memory/checked_ptr.h
index 86b6a7f51c4b..60c9dd13cb79 100644
--- a/base/memory/checked_ptr.h
+++ b/base/memory/checked_ptr.h
@@ -394,7 +394,7 @@ class CheckedPtr {
 
   // Deliberately implicit, because CheckedPtr is supposed to resemble raw ptr.
   // NOLINTNEXTLINE(runtime/explicit)
-  constexpr ALWAYS_INLINE CheckedPtr(nullptr_t) noexcept
+  constexpr ALWAYS_INLINE CheckedPtr(std::nullptr_t) noexcept
       : wrapped_ptr_(Impl::GetWrappedNullPtr()) {}
 
   // Deliberately implicit, because CheckedPtr is supposed to resemble raw ptr.
@@ -531,16 +531,16 @@ class CheckedPtr {
   // Needed for comparisons against nullptr. Without these, a slightly more
   // costly version would be called that extracts wrapped pointer, as opposed
   // to plain comparison against 0.
-  friend ALWAYS_INLINE bool operator==(const CheckedPtr& lhs, nullptr_t) {
+  friend ALWAYS_INLINE bool operator==(const CheckedPtr& lhs, std::nullptr_t) {
     return !lhs;
   }
-  friend ALWAYS_INLINE bool operator!=(const CheckedPtr& lhs, nullptr_t) {
+  friend ALWAYS_INLINE bool operator!=(const CheckedPtr& lhs, std::nullptr_t) {
     return !!lhs;  // Use !! otherwise the costly implicit cast will be used.
   }
-  friend ALWAYS_INLINE bool operator==(nullptr_t, const CheckedPtr& rhs) {
+  friend ALWAYS_INLINE bool operator==(std::nullptr_t, const CheckedPtr& rhs) {
     return !rhs;
   }
-  friend ALWAYS_INLINE bool operator!=(nullptr_t, const CheckedPtr& rhs) {
+  friend ALWAYS_INLINE bool operator!=(std::nullptr_t, const CheckedPtr& rhs) {
     return !!rhs;  // Use !! otherwise the costly implicit cast will be used.
   }
 
-- 
2.27.0

